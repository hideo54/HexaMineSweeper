{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["L","Hexagon","props","useState","status","setStatus","width","i","mines","a","Math","floor","b","topVw","leftVw","fill","num","includes","alert","filter","nei","length","style","position","top","left","onClick","e","preventDefault","onContextMenu","xmlns","viewBox","points","stroke","x","y","fontSize","App","sampleSize","range","masu","map","key","href","target","rel","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wOAIMA,G,MAAI,IAIJC,EAAU,SAACC,GAIV,IAAD,EACwBC,mBAAiB,WADzC,mBACGC,EADH,KACWC,EADX,KAcIC,EAAoBJ,EAApBI,MAAOC,EAAaL,EAAbK,EAAGC,EAAUN,EAAVM,MACZC,EAAIC,KAAKC,MAAMJ,EAAIP,GACnBY,EAAIL,EAAIP,EACRa,EAASb,EAAUM,EAAmB,IAATM,EAAIH,GAAWH,EAC5CQ,EAAmB,MAATL,EAAIG,GAAaN,EAC7BS,EAAO,OACI,YAAXX,IAAsBW,EAAO,QACjC,IAAIC,EAAM,EACK,aAAXZ,IACEI,EAAMS,SAASf,EAAMK,IACvBQ,EAAO,MACPG,MAAM,gBAUNF,EARkB,CAChBT,EAAIP,EACJO,EAAIP,IAAM,GAAK,EAAIO,EAAIP,EAAI,EAC3BO,EAAIP,IAAOA,GAAU,EAAIO,EAAI,EAC7BA,EAAIP,IAAM,GAAK,EAAIO,EAAI,EACvBA,EAAIP,EACJO,EAAIP,IAAOA,GAAU,EAAIO,EAAIP,EAAI,GAEnBmB,QAAO,SAAAC,GAAG,OAAIlB,EAAMM,MAAMS,SAASG,MAAMC,OACzDN,EAAO,UAGX,OACE,yBAAKO,MAAO,CACVhB,MAAM,GAAD,OAAKJ,EAAMI,MAAX,MACLiB,SAAU,WACVC,IAAI,GAAD,OAAKX,EAAL,MACHY,KAAK,GAAD,OAAKX,EAAL,OACHY,QA3CU,SAACC,GACdA,EAAEC,iBACFvB,EAAU,aAyCUwB,cAvCN,SAACF,GACfA,EAAEC,iBAEAvB,EADa,YAAXD,EACQ,UAEA,aAmCV,yBAAK0B,MAAM,6BAA6BC,QAAQ,gBAC9C,6BACEC,OAAO,4EACPjB,KAAMA,EACNkB,OAAO,SAERjB,GAAO,GACN,0BAAMkB,EAAE,KAAKC,EAAE,KAAKC,SAAS,MAAMpB,MAiC9BqB,EA1BH,WAAO,IAAD,EACUlC,mBAAmBmC,qBAAWC,gBAAM,KAAD,IAACvC,EAAK,IAAIA,IADvD,mBACTQ,EADS,KAEVgC,GAFU,KAEHD,gBAAM,KAAD,IAACvC,EAAK,IAAGyC,KAAI,SAAAlC,GAAC,OAC9B,kBAAC,EAAD,CAASmC,IAAKnC,EAAGD,MAAO,EAAGC,EAAGA,EAAGC,MAAOA,QAE1C,OACE,oCACE,+CACA,uJACA,4BACE,+RACA,uKACA,oLACA,kMACA,mEACE,uBAAGmC,KAAK,8CAA8CC,OAAO,SAASC,IAAI,YAA1E,4HADF,iEAOF,yBAAKvB,MAAO,CAAEC,SAAU,aAAeiB,KCjFzBM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.0ae148f7.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { range, sampleSize } from 'lodash';\nimport './App.css';\n\nconst L = 10;\n\ntype Status = 'unknown' | 'flagged' | 'revealed';\n\nconst Hexagon = (props: {\n  width: number;\n  i: number;\n  mines: number[];\n}) => {\n  const [status, setStatus] = useState<Status>('unknown');\n  const reveal = (e: any) => {\n    e.preventDefault();\n    setStatus('revealed');\n  };\n  const setFlag = (e: any) => {\n    e.preventDefault();\n    if (status === 'flagged') {\n      setStatus('unknown');\n    } else {\n      setStatus('flagged');\n    }\n  };\n  const { width, i, mines } = props;\n  const a = Math.floor(i / L);\n  const b = i % L;\n  const topVw = (L * 0.5 * width) + (b - a) * 0.5 * width;\n  const leftVw = (a + b) * 0.866 * width;\n  let fill = 'gray';\n  if (status === 'flagged') fill = 'blue';\n  let num = 0;\n  if (status === 'revealed') {\n    if (mines.includes(props.i)) {\n      fill = 'red';\n      alert('GAME OVER!');\n    } else {\n      const neighbors = [\n        i + L,\n        i % L === 0 ? -1 : i + L - 1,\n        i % L === (L - 1) ? -1 : i + 1,\n        i % L === 0 ? -1 : i - 1,\n        i - L,\n        i % L === (L - 1) ? -1 : i - L + 1,\n      ];\n      num = neighbors.filter(nei => props.mines.includes(nei)).length;\n      fill = 'white';\n    }\n  }\n  return (\n    <div style={{\n      width: `${props.width}vw`,\n      position: 'absolute',\n      top: `${topVw}vw`,\n      left: `${leftVw}vw`,\n    }} onClick={reveal} onContextMenu={setFlag}>\n      <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 86.6\">\n        <polygon\n          points='25.29 86.1 0.58 43.3 25.29 0.5 74.71 0.5 99.42 43.3 74.71 86.1 25.29 86.1'\n          fill={fill}\n          stroke='gray'\n        />\n        {num >= 1 &&\n          <text x=\"50\" y=\"50\" fontSize=\"32\">{num}</text>\n        }\n      </svg>\n    </div>\n  );\n};\n\nconst App = () => {\n  const [mines, setMines] = useState<number[]>(sampleSize(range(L ** 2), L));\n  const masu = range(L ** 2).map(i =>\n    <Hexagon key={i} width={5} i={i} mines={mines} />\n  );\n  return (\n    <>\n      <h1>HexaMineSweeper</h1>\n      <p>マスが六角形になったマインスイーパです。</p>\n      <ul>\n        <li>クリックでそのマスをめくります。 (運が悪いといきなりゲームオーバーになります。未改善。)</li>\n        <li>右クリックでフラグを立てます (青色になります)。</li>\n        <li>地雷 (赤色) をめくってしまったらゲームオーバーです。</li>\n        <li>ゲームクリアしても特に何も出ません。ごめんね。未改善。</li>\n        <li>このゲームは\n          <a href='https://www.youtube.com/watch?v=TkzetQiRsts' target='_blank' rel='noopener'>\n            TSG LIVE! 5 企画「ライブゲームプログラミング Day 2」\n          </a>\n          にて作成されました。\n        </li>\n      </ul>\n      <div style={{ position: 'relative' }}>{masu}</div>\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}